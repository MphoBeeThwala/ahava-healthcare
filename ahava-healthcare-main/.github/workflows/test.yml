name: Test Suite

on:
  push:
    branches: ["master", "main", "develop"]
  pull_request:
    branches: ["master", "main", "develop"]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ahava_user
          POSTGRES_PASSWORD: ahava_test_password
          POSTGRES_DB: ahava-healthcare-test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare Yarn
        run: corepack prepare yarn@4.3.1 --activate

      - name: Install dependencies
        run: yarn install --immutable

      - name: Generate Prisma Client
        working-directory: ./apps/backend
        run: yarn prisma generate

      - name: Run database migrations
        working-directory: ./apps/backend
        env:
          DATABASE_URL: postgresql://ahava_user:ahava_test_password@localhost:5432/ahava-healthcare-test?schema=public
        run: yarn prisma migrate deploy

      - name: Run tests
        working-directory: ./apps/backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://ahava_user:ahava_test_password@localhost:5432/ahava-healthcare-test?schema=public
          REDIS_URL: redis://localhost:6379/1
          JWT_SECRET: test-jwt-secret-key-for-ci-testing
          ENCRYPTION_KEY: 4KYLz9ePSX4fKHEuwuNI9yg31ThBTrlMNc22n/VVdGw=
          ENCRYPTION_IV_SALT: 74657374736f6d6573616c742021
          RATE_LIMIT_SKIP: 'true'
        run: yarn test --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./apps/backend/coverage/coverage-final.json
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage summary
        if: always()
        working-directory: ./apps/backend
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

  lint-backend:
    name: Backend Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Prepare Yarn
        run: corepack prepare yarn@4.3.1 --activate

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run TypeScript compiler
        working-directory: ./apps/backend
        run: yarn tsc --noEmit

      - name: Run ESLint (if configured)
        working-directory: ./apps/backend
        run: yarn lint || echo "ESLint not configured, skipping..."
        continue-on-error: true

  test-results-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test-backend, lint-backend]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "# 🧪 Test Suite Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Backend Tests: ${{ needs.test-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "## Backend Linting: ${{ needs.lint-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.test-backend.result }}" == "success" ] && [ "${{ needs.lint-backend.result }}" == "success" ]; then
            echo "✅ All checks passed! Ready to merge." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some checks failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
          fi

