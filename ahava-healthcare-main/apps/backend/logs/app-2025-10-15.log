{"timestamp":"2025-10-15T09:49:23.916Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T09:49:23.920Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T09:49:23.921Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T09:49:23.922Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T09:49:23.924Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T09:49:23.926Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T09:49:23.937Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T09:49:23.938Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T09:49:23.939Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T09:50:25.610Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T09:50:25.615Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T09:50:25.618Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T09:50:25.619Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T09:50:25.621Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T09:50:25.622Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T09:50:25.637Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T09:50:25.639Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T09:50:25.640Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T09:51:01.104Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T09:51:01.109Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T09:51:01.112Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T09:51:01.115Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T09:51:01.116Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T09:51:01.118Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T09:51:01.141Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T09:51:01.143Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T09:51:01.144Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T09:51:18.122Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T09:51:18.127Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T09:51:18.129Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T09:51:18.133Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T09:51:18.136Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T09:51:18.138Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T09:51:18.158Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T09:51:18.160Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T09:51:18.161Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T11:10:46.911Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T11:10:46.920Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T11:10:46.926Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T11:10:46.928Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T11:10:46.932Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T11:10:46.934Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T11:10:46.961Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T11:10:46.962Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T11:10:46.966Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T11:56:58.911Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T11:56:58.913Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T11:56:58.914Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T11:56:58.915Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T11:56:58.916Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T11:56:58.918Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T11:56:58.928Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T11:56:58.929Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T11:56:58.930Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T12:34:36.686Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T12:34:36.695Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T12:34:36.697Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T12:34:36.698Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T12:34:36.701Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T12:34:36.703Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T12:34:36.724Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T12:34:36.726Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T12:34:36.728Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T12:50:40.596Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T12:50:40.604Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T12:50:40.606Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T12:50:40.608Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T12:50:40.609Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T12:50:40.610Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T12:50:40.628Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T12:50:40.630Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T12:50:40.632Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T12:59:56.042Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-SCHEDULED"}}}
{"timestamp":"2025-10-15T12:59:56.083Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-EN_ROUTE"}}}
{"timestamp":"2025-10-15T12:59:56.112Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-ARRIVED"}}}
{"timestamp":"2025-10-15T12:59:56.146Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-IN_PROGRESS"}}}
{"timestamp":"2025-10-15T12:59:56.171Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-COMPLETED"}}}
{"timestamp":"2025-10-15T12:59:56.172Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.197Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-CANCELLED"}}}
{"timestamp":"2025-10-15T12:59:56.212Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.243Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.251Z","level":"ERROR","message":"Failed to add nurse report","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:416:38\n\n  413 const { nurseReport } = value;\n  414 \n  415 // Get visit\n→ 416 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"test-visit-id"}}}
{"timestamp":"2025-10-15T12:59:56.272Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.296Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.327Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.387Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.419Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.456Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.490Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.519Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.560Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.587Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.608Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.631Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.665Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.693Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T12:59:56.716Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.364Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:02:58.483Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-SCHEDULED"}}}
{"timestamp":"2025-10-15T13:02:58.391Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:02:58.396Z","level":"DEBUG","message":"Paystack API request","metadata":{"method":"get","url":"/transaction/verify/pay_ref_123456"}}
{"timestamp":"2025-10-15T13:02:58.516Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.547Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-EN_ROUTE"}}}
{"timestamp":"2025-10-15T13:02:58.585Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.594Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-ARRIVED"}}}
{"timestamp":"2025-10-15T13:02:58.616Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.624Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-IN_PROGRESS"}}}
{"timestamp":"2025-10-15T13:02:58.652Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.658Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-COMPLETED"}}}
{"timestamp":"2025-10-15T13:02:58.695Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.702Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-CANCELLED"}}}
{"timestamp":"2025-10-15T13:02:58.749Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.763Z","level":"ERROR","message":"Failed to add nurse report","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:416:38\n\n  413 const { nurseReport } = value;\n  414 \n  415 // Get visit\n→ 416 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"test-visit-id"}}}
{"timestamp":"2025-10-15T13:02:58.791Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.836Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.878Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.903Z","level":"ERROR","message":"Paystack response error","metadata":{"error":"Request failed with status code 401"}}
{"timestamp":"2025-10-15T13:02:58.915Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.953Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:58.973Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:02:58.974Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:02:58.975Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:59.002Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:59.047Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:59.074Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:59.101Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:59.143Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:59.172Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:02:59.194Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.502Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-SCHEDULED"}}}
{"timestamp":"2025-10-15T13:05:36.533Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.571Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-EN_ROUTE"}}}
{"timestamp":"2025-10-15T13:05:36.572Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:05:36.609Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-ARRIVED"}}}
{"timestamp":"2025-10-15T13:05:36.616Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.654Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-IN_PROGRESS"}}}
{"timestamp":"2025-10-15T13:05:36.669Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.598Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:05:36.603Z","level":"DEBUG","message":"Paystack API request","metadata":{"method":"get","url":"/transaction/verify/pay_ref_123456"}}
{"timestamp":"2025-10-15T13:05:36.715Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-COMPLETED"}}}
{"timestamp":"2025-10-15T13:05:36.717Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.751Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-CANCELLED"}}}
{"timestamp":"2025-10-15T13:05:36.753Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.800Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.812Z","level":"ERROR","message":"Failed to add nurse report","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:416:38\n\n  413 const { nurseReport } = value;\n  414 \n  415 // Get visit\n→ 416 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"test-visit-id"}}}
{"timestamp":"2025-10-15T13:05:36.826Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.855Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.889Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.913Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.937Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:36.982Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:37.004Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:37.031Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:37.057Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:37.101Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:37.127Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:37.150Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:05:37.165Z","level":"ERROR","message":"Paystack response error","metadata":{"error":"Request failed with status code 401"}}
{"timestamp":"2025-10-15T13:05:37.215Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:05:37.215Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:05:37.215Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.182Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-SCHEDULED"}}}
{"timestamp":"2025-10-15T13:08:05.217Z","level":"ERROR","message":"Failed to initialize payment","metadata":{"error":{"error":"\nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\payments.ts:45:34\n\n  42 const { bookingId, callbackUrl } = value;\n  43 \n  44 // Get user email\n→ 45 const user = await prisma.user.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.260Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-EN_ROUTE"}}}
{"timestamp":"2025-10-15T13:08:05.296Z","level":"ERROR","message":"Failed to initialize payment","metadata":{"error":{"error":"\nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\payments.ts:45:34\n\n  42 const { bookingId, callbackUrl } = value;\n  43 \n  44 // Get user email\n→ 45 const user = await prisma.user.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.308Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-ARRIVED"}}}
{"timestamp":"2025-10-15T13:08:05.322Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.344Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-IN_PROGRESS"}}}
{"timestamp":"2025-10-15T13:08:05.345Z","level":"ERROR","message":"Failed to initialize payment","metadata":{"error":{"error":"\nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\payments.ts:45:34\n\n  42 const { bookingId, callbackUrl } = value;\n  43 \n  44 // Get user email\n→ 45 const user = await prisma.user.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.371Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:08:05.388Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.390Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-COMPLETED"}}}
{"timestamp":"2025-10-15T13:08:05.421Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.422Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-CANCELLED"}}}
{"timestamp":"2025-10-15T13:08:05.457Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.380Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:08:05.388Z","level":"DEBUG","message":"Paystack API request","metadata":{"method":"get","url":"/transaction/verify/pay_ref_123456"}}
{"timestamp":"2025-10-15T13:08:05.483Z","level":"ERROR","message":"Failed to add nurse report","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:416:38\n\n  413 const { nurseReport } = value;\n  414 \n  415 // Get visit\n→ 416 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"test-visit-id"}}}
{"timestamp":"2025-10-15T13:08:05.493Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.532Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.565Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.594Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.616Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.636Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.657Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.693Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.714Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.735Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.755Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.793Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.816Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.838Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:08:05.871Z","level":"ERROR","message":"Paystack response error","metadata":{"error":"Request failed with status code 401"}}
{"timestamp":"2025-10-15T13:08:05.910Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:08:05.910Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:08:05.911Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:53.067Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T13:09:53.071Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T13:09:53.072Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T13:09:53.074Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T13:09:53.078Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T13:09:53.080Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T13:09:53.093Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T13:09:53.094Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T13:09:53.095Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T13:09:55.605Z","level":"ERROR","message":"Failed to initialize payment","metadata":{"error":{"error":"\nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\payments.ts:45:34\n\n  42 const { bookingId, callbackUrl } = value;\n  43 \n  44 // Get user email\n→ 45 const user = await prisma.user.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:55.613Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-SCHEDULED"}}}
{"timestamp":"2025-10-15T13:09:55.648Z","level":"ERROR","message":"Failed to initialize payment","metadata":{"error":{"error":"\nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\payments.ts:45:34\n\n  42 const { bookingId, callbackUrl } = value;\n  43 \n  44 // Get user email\n→ 45 const user = await prisma.user.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:55.651Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-EN_ROUTE"}}}
{"timestamp":"2025-10-15T13:09:55.694Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-ARRIVED"}}}
{"timestamp":"2025-10-15T13:09:55.701Z","level":"ERROR","message":"Failed to initialize payment","metadata":{"error":{"error":"\nInvalid `prisma.user.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\payments.ts:45:34\n\n  42 const { bookingId, callbackUrl } = value;\n  43 \n  44 // Get user email\n→ 45 const user = await prisma.user.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:55.716Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:09:55.723Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-IN_PROGRESS"}}}
{"timestamp":"2025-10-15T13:09:55.749Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-COMPLETED"}}}
{"timestamp":"2025-10-15T13:09:55.719Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:09:55.724Z","level":"DEBUG","message":"Paystack API request","metadata":{"method":"get","url":"/transaction/verify/pay_ref_123456"}}
{"timestamp":"2025-10-15T13:09:55.772Z","level":"ERROR","message":"Failed to update visit status","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:246:38\n\n  243 const { status } = value;\n  244 \n  245 // Get visit\n→ 246 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"visit-CANCELLED"}}}
{"timestamp":"2025-10-15T13:09:55.789Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:55.841Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:55.843Z","level":"ERROR","message":"Failed to add nurse report","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\visits.ts:416:38\n\n  413 const { nurseReport } = value;\n  414 \n  415 // Get visit\n→ 416 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id","visitId":"test-visit-id"}}}
{"timestamp":"2025-10-15T13:09:55.868Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:55.905Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:55.943Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:55.973Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:55.997Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.019Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.042Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.068Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.090Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.118Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.142Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.163Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.184Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.192Z","level":"ERROR","message":"Paystack response error","metadata":{"error":"Request failed with status code 401"}}
{"timestamp":"2025-10-15T13:09:56.233Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.241Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:09:56.241Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:09:56.242Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.263Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:09:56.292Z","level":"ERROR","message":"Failed to send message","metadata":{"error":{"error":"\nInvalid `prisma.visit.findUnique()` invocation in\nC:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\routes\\messages.ts:41:38\n\n  38 const senderId = req.user!.id;\n  39 \n  40 // Verify visit exists and user is authorized\n→ 41 const visit = await prisma.visit.findUnique(\nDatabase `ahava-healthcare-test` does not exist","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:22:40.587Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T13:22:40.610Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T13:22:40.616Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T13:22:40.621Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T13:22:40.623Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T13:22:40.626Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T13:22:40.656Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T13:22:40.659Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T13:22:40.661Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T13:22:42.758Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:22:42.827Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:22:42.834Z","level":"DEBUG","message":"Paystack API request","metadata":{"method":"get","url":"/transaction/verify/pay_ref_123456"}}
{"timestamp":"2025-10-15T13:22:43.348Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0tn290000u09s0imrwj6h","email":"test-1760534562775-cz8k1@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:22:43.518Z","level":"ERROR","message":"Paystack response error","metadata":{"error":"Request failed with status code 401"}}
{"timestamp":"2025-10-15T13:22:43.610Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:22:43.612Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:22:43.613Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:22:43.718Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0tncx0003u09ssnhrj8in","email":"test-1760534563404-2vz28b@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:22:44.015Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0tnl40006u09sfdbfdctw","email":"test-1760534563724-f3y7vi@example.com","role":"NURSE"}}
{"timestamp":"2025-10-15T13:22:44.300Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0tnt10009u09s34i68082","email":"test-1760534564018-5y5fh@example.com","role":"DOCTOR"}}
{"timestamp":"2025-10-15T13:22:44.620Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0to1w000cu09sc24or8t7","email":"test-1760534564333-zwegra@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:22:44.921Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0toaa000fu09sv1rnn7zo","email":"test-1760534564640-3t3ysk@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:22:45.349Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0tom8000iu09sm8u5svtu","email":"test-1760534565058-2ebgo@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:22:46.006Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0tow1000lu09sjy56kbzp","email":"login@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:22:46.583Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0tpcn000ou09sr2mp8gvp","email":"patient@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:22:47.153Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0tpsa000ru09scsrp0gy4","email":"nurse@test.com","role":"NURSE"}}
{"timestamp":"2025-10-15T13:22:47.733Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0tq88000uu09sjb1prywp","email":"doctor@test.com","role":"DOCTOR"}}
{"timestamp":"2025-10-15T13:22:48.302Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0tqo9000xu09sxaji9k0t","email":"admin@test.com","role":"ADMIN"}}
{"timestamp":"2025-10-15T13:22:48.876Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0tr4j0010u09serm63rnw","email":"cookie@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:22:52.288Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0ttrj0016u09ssppro7ev","email":"logout@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:22:52.295Z","level":"INFO","message":"User logged out successfully"}
{"timestamp":"2025-10-15T13:22:52.613Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0tu7x0019u09s42e0zgeh","email":"test-1760534572338-xi3qm@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:22:52.975Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0tui1001cu09snagve0xo","email":"test-1760534572697-zoxlur@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:44.155Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T13:25:44.160Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T13:25:44.163Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T13:25:44.165Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T13:25:44.166Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T13:25:44.167Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T13:25:44.221Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T13:25:44.223Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T13:25:44.226Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T13:25:45.887Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:25:45.945Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:25:45.953Z","level":"DEBUG","message":"Paystack API request","metadata":{"method":"get","url":"/transaction/verify/pay_ref_123456"}}
{"timestamp":"2025-10-15T13:25:46.526Z","level":"ERROR","message":"Paystack response error","metadata":{"error":"Request failed with status code 401"}}
{"timestamp":"2025-10-15T13:25:46.652Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:25:46.653Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:25:46.654Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:25:46.756Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0xkkv0000u02w72jjxxc4","email":"test-1760534746223-zh2f9c@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:47.151Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0xkw30003u02wd3jaa78a","email":"test-1760534746823-v4ktqo@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:47.487Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0xl5g0006u02w3c92ag4q","email":"test-1760534747160-pwxsbk@example.com","role":"NURSE"}}
{"timestamp":"2025-10-15T13:25:47.826Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0xlex0009u02wortgv7e8","email":"test-1760534747496-9klbuv@example.com","role":"DOCTOR"}}
{"timestamp":"2025-10-15T13:25:48.207Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0xlpg000cu02waovqwp2d","email":"test-1760534747875-wqg5n@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:48.563Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0xlzg000fu02wsu8qwn3h","email":"test-1760534748249-xsgpu@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:49.132Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0xmf9000iu02wmntd52r2","email":"test-1760534748843-en99a@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:49.885Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0xmqs000lu02wdq9ulibr","email":"login@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:50.535Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0xna4000ou02wp1l5rnwn","email":"patient@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:51.095Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0xnpy000ru02wyprxko6p","email":"nurse@test.com","role":"NURSE"}}
{"timestamp":"2025-10-15T13:25:51.682Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0xo5e000uu02wyyo01gtk","email":"doctor@test.com","role":"DOCTOR"}}
{"timestamp":"2025-10-15T13:25:52.296Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0xomx000xu02wnx5aaw80","email":"admin@test.com","role":"ADMIN"}}
{"timestamp":"2025-10-15T13:25:52.906Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0xp3x0010u02w4nmzbqlo","email":"cookie@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:56.522Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0xrwx0016u02w2uw86g9p","email":"logout@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:56.534Z","level":"INFO","message":"User logged out successfully"}
{"timestamp":"2025-10-15T13:25:56.889Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0xses0019u02wa1kjtnl6","email":"test-1760534756601-6ga52@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:25:57.233Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0xsoa001cu02w2i4rt6ds","email":"test-1760534756950-par4ji@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:34.509Z","level":"INFO","message":"Test info message"}
{"timestamp":"2025-10-15T13:26:34.518Z","level":"ERROR","message":"Test error message","metadata":{}}
{"timestamp":"2025-10-15T13:26:34.520Z","level":"WARN","message":"Test warning message"}
{"timestamp":"2025-10-15T13:26:34.522Z","level":"DEBUG","message":"Test debug message"}
{"timestamp":"2025-10-15T13:26:34.527Z","level":"SECURITY","message":"Test security event"}
{"timestamp":"2025-10-15T13:26:34.535Z","level":"INFO","message":"Test with metadata","metadata":{"userId":"123","action":"login"}}
{"timestamp":"2025-10-15T13:26:34.564Z","level":"ERROR","message":"Error occurred","metadata":{"error":"Test error","stack":"Error: Test error\n    at Object.<anonymous> (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\apps\\backend\\src\\__tests__\\logger.test.ts:50:19)\n    at Promise.then.completed (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\utils.js:231:10)\n    at _callCircusTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:252:3)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:126:9)\n    at _runTestsForDescribeBlock (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:121:9)\n    at run (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\run.js:71:3)\n    at runAndTransformResultsToJestFormat (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapterInit.js:122:21)\n    at jestAdapter (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-circus\\build\\legacy-code-todo-rewrite\\jestAdapter.js:79:19)\n    at runTestInternal (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:367:16)\n    at runTest (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\runTest.js:444:34)\n    at Object.worker (C:\\Users\\User\\OneDrive\\Documentos\\Projects\\ahava-healthcare-main\\ahava-healthcare-main\\node_modules\\jest-runner\\build\\testWorker.js:106:12)"}}
{"timestamp":"2025-10-15T13:26:34.568Z","level":"DEBUG","message":"Database CREATE","metadata":{"model":"User","recordId":"123"}}
{"timestamp":"2025-10-15T13:26:34.570Z","level":"SECURITY","message":"Failed login attempt","metadata":{"ip":"192.168.1.1","attempts":3},"userId":"user-123"}
{"timestamp":"2025-10-15T13:26:37.738Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:26:37.830Z","level":"INFO","message":"Verifying payment","metadata":{"reference":"pay_ref_123456"}}
{"timestamp":"2025-10-15T13:26:37.850Z","level":"DEBUG","message":"Paystack API request","metadata":{"method":"get","url":"/transaction/verify/pay_ref_123456"}}
{"timestamp":"2025-10-15T13:26:38.400Z","level":"ERROR","message":"Paystack response error","metadata":{"error":"Request failed with status code 401"}}
{"timestamp":"2025-10-15T13:26:38.544Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:26:38.545Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","reference":"pay_ref_123456"}}}
{"timestamp":"2025-10-15T13:26:38.547Z","level":"ERROR","message":"Failed to verify payment","metadata":{"error":{"error":"Payment verification failed: Request failed with status code 401","userId":"test-user-id"}}}
{"timestamp":"2025-10-15T13:26:38.707Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0yonp0000u0p8ux6lyf6n","email":"test-1760534798018-l0uzla@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:39.149Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0yp0m0003u0p8cfwd9oza","email":"test-1760534798820-sls339@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:39.453Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0yp8z0006u0p8vlgivdve","email":"test-1760534799154-1vga1@example.com","role":"NURSE"}}
{"timestamp":"2025-10-15T13:26:39.758Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0yphj0009u0p8u3ijhwsy","email":"test-1760534799458-3nsnyg@example.com","role":"DOCTOR"}}
{"timestamp":"2025-10-15T13:26:40.092Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0ypqs000cu0p8xkynm9o6","email":"test-1760534799797-2o4xvc@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:40.414Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0ypzo000fu0p8ewo08ofl","email":"test-1760534800119-3fn9u8@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:40.979Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0yqff000iu0p8c8mhkl4s","email":"test-1760534800694-av4kc5@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:41.646Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0yqpb000lu0p8coxm7py3","email":"login@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:42.243Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0yr6o000ou0p8xz87jw36","email":"patient@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:42.816Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0yrml000ru0p89gqmnnst","email":"nurse@test.com","role":"NURSE"}}
{"timestamp":"2025-10-15T13:26:43.385Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0ys28000uu0p8wkr7cxug","email":"doctor@test.com","role":"DOCTOR"}}
{"timestamp":"2025-10-15T13:26:43.955Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0ysi8000xu0p8s2ezbt8q","email":"admin@test.com","role":"ADMIN"}}
{"timestamp":"2025-10-15T13:26:44.557Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0ysyp0010u0p8i8k66rw2","email":"cookie@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:48.091Z","level":"INFO","message":"User logged in successfully","metadata":{"userId":"cmgs0yvp00016u0p8gt7j3hhl","email":"logout@test.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:48.104Z","level":"INFO","message":"User logged out successfully"}
{"timestamp":"2025-10-15T13:26:48.479Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0yw7q0019u0p88g57rod6","email":"test-1760534808173-j0dvab@example.com","role":"PATIENT"}}
{"timestamp":"2025-10-15T13:26:48.846Z","level":"INFO","message":"User registered successfully","metadata":{"userId":"cmgs0ywhx001cu0p8xijy2lng","email":"test-1760534808547-7e6zb@example.com","role":"PATIENT"}}
