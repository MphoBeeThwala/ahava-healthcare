// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  NURSE
  DOCTOR
  ADMIN
}

enum VisitStatus {
  SCHEDULED
  EN_ROUTE
  ARRIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  INSURANCE
}

enum InsuranceStatus {
  PENDING_VERIFICATION
  VERIFIED
  REJECTED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  phone             String?  @unique
  firstName         String
  lastName          String
  role              UserRole
  isActive          Boolean  @default(true)
  isVerified        Boolean  @default(false)
  profileImage      String?
  dateOfBirth       DateTime?
  gender            String?
  preferredLanguage String   @default("en-ZA")
  timezone          String   @default("Africa/Johannesburg")
  
  // Encrypted fields
  encryptedAddress  String?
  encryptedIdNumber String?
  
  // Location tracking (for nurses)
  lastKnownLat      Float?
  lastKnownLng      Float?
  lastLocationUpdate DateTime?
  
  // Push notification tokens
  pushTokens        String[]
  
  // Auth
  passwordHash      String?
  refreshTokens     RefreshToken[]
  
  // Relations
  patientBookings   Booking[] @relation("PatientBookings")
  nurseVisits       Visit[]   @relation("NurseVisits")
  doctorOversight   Visit[]   @relation("DoctorOversight")
  sentMessages      Message[] @relation("SentMessages")
  receivedMessages  Message[] @relation("ReceivedMessages")
  
  // Audit
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model Booking {
  id              String        @id @default(cuid())
  patientId       String
  nurseId         String?
  doctorId        String?
  
  // Encrypted address
  encryptedAddress String
  
  // Scheduling
  scheduledDate   DateTime
  estimatedDuration Int         @default(60) // minutes
  
  // Payment
  paymentMethod   PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  amountInCents   Int
  
  // Insurance (if applicable)
  insuranceProvider String?
  insuranceMemberNumber String?
  insuranceStatus InsuranceStatus?
  
  // Paystack
  paystackReference String?
  
  // Relations
  patient         User          @relation("PatientBookings", fields: [patientId], references: [id])
  visit           Visit?
  
  // Audit
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("bookings")
}

model Visit {
  id              String      @id @default(cuid())
  bookingId       String      @unique
  nurseId         String
  doctorId        String?
  
  status          VisitStatus @default(SCHEDULED)
  
  // Timing
  scheduledStart  DateTime
  actualStart     DateTime?
  actualEnd       DateTime?
  
  // Location tracking
  gpsCoordinates  Json?       // { lat: number, lng: number, timestamp: string }[]
  
  // Reports
  nurseReport     String?     // Encrypted
  doctorReview    String?
  doctorRating    Int?        // 1-5 stars
  
  // Relations
  booking         Booking     @relation(fields: [bookingId], references: [id])
  nurse           User        @relation("NurseVisits", fields: [nurseId], references: [id])
  doctor          User?       @relation("DoctorOversight", fields: [doctorId], references: [id])
  messages        Message[]
  payments        Payment[]
  
  // Audit
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("visits")
}

model Message {
  id              String      @id @default(cuid())
  visitId         String
  senderId        String
  recipientId     String
  
  type            MessageType @default(TEXT)
  content         String      // Encrypted
  isRead          Boolean     @default(false)
  
  // File attachments
  attachmentUrl   String?
  attachmentType  String?
  
  // Relations
  visit           Visit       @relation(fields: [visitId], references: [id], onDelete: Cascade)
  sender          User        @relation("SentMessages", fields: [senderId], references: [id])
  recipient       User        @relation("ReceivedMessages", fields: [recipientId], references: [id])
  
  // Audit
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("messages")
}

model Payment {
  id              String        @id @default(cuid())
  visitId         String
  amountInCents   Int
  currency        String        @default("ZAR")
  status          PaymentStatus @default(PENDING)
  
  // Paystack
  paystackReference String?
  paystackData    Json?         // Store Paystack response
  
  // Relations
  visit           Visit         @relation(fields: [visitId], references: [id])
  
  // Audit
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("payments")
}

model AuditLog {
  id              String      @id @default(cuid())
  userId          String?
  userRole        UserRole?
  action          String
  resource        String
  resourceId      String?
  metadata        Json?
  checksum        String      // For integrity verification
  
  // Audit
  createdAt       DateTime    @default(now())
  
  @@map("audit_logs")
}

model ExportJob {
  id              String      @id @default(cuid())
  userId          String
  userRole        UserRole
  type            String      // "visit_report", "user_list", etc.
  filters         Json        // Store filter criteria
  status          String      @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  fileUrl         String?
  fileSize        Int?
  checksum        String?
  
  // Audit
  createdAt       DateTime    @default(now())
  completedAt     DateTime?
  
  @@map("export_jobs")
}
